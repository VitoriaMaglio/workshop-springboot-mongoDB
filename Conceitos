MongoDB é um banco de dados não relacional.
Em bancos de dados não relacionais, não criamos tabelas, pois não possuem sequência (sequel). Em vez disso, criamos coleções, que são orientadas a documentos.

° Nivelamento sobre NoSQL e MongoDB:
Banco de dados não relacionais solucionam dois principais problemas dos bancos relacionais:

°Incompatibilidade de impedância:
Em modelos relacionais, cada entidade é representada por uma tabela.

Os dados são armazenados em tabelas diferentes e, para montar relatórios, é necessário realizar diversas junções.

Esses dados são armazenados de forma diferente da memória do computador, que utiliza objetos relacionados na RAM.

No disco, os dados são armazenados em linhas e colunas, o que exige constante tradução de objetos relacionais para objetos de memória.

ORM (Object-Relational Mapping) surgiu para mapear objetos relacionais e facilitar a vida dos programadores, mas pode causar problemas de performance.
°Transações e junções:
Em bancos relacionais, transações e junções degradam a performance.

Grandes volumes de dados e acessos não escalam bem em ambientes distribuídos (clusters).

°Existem duas classes principais de banco de dados:
-Banco de dados orientado a agregados->chave-valor, documentos,família de colunas
-Banco de dados de grafos

Vamos utilizar banco de dados orientado a agregados:
Conceitos->

°Agregado é um conjunto de dados relacionados tratados como uma unidade
°Bloco contíguo, acessa os dados de uma entidade com um só acesso

°Normalização(em bancos relacionais)->Separar dados em várias tabelas para evitar duplicação e garantir integridade.
°Não normalização->Dados não precisam seguir o modelo normalizado->guardar todos os dados juntos em um único documento ou coleção,
já possui a estrutura de objetos associados, todos dados são armazenados juntos, uma unidade natural de replicação e estão no mesmo node do cluster

Nos bancos não relacionais, o modelo é mais flexível, e muitas vezes abre mão de ACID completo para obter performance e escalabilidade.
(bancos relacionais:
ACID é um conjunto de propriedades que garantem que as transações sejam executadas de forma confiável:
Atomicidade
Consistência
Isolamento
Durabilidade)

Banco relacional: tabelas se relacionam com fk
Não relacional: tem um agregado com vários objetos; pode ter listas

°Iniciando projeto com SPRING:

Objetivo de projeto:
Sistema que representa:

Usuários (User) → podem realizar vários posts.

Posts (Post) → têm um autor e podem ter vários comentários.

Comentários (Comment) → possuem um autor e pertencem a um post.

°Estrutura de camadas

 Controller (REST) → expõe os endpoints da API.

 Service → contém a lógica de negócio.

 Repository → faz o acesso ao banco de dados.

 Domain (Model) → representa as entidades.

 Fluxo:
 Front-end → Controllers → Services → Repository → Domain → Banco de dados


Criar um projeto com Maven->
Editar pom.xml e adicionar parent do Spring Boot, Dependência principal do Spring Boot, Web (para REST APIs) e  Testes
Também adicionar a dependência do banco de dados
Criar estrutura src/main/java e pacote com a Classe Main do seu projeto
Colocar @SpringBootApplication acima do nome da classe e  SpringApplication.run(DddWorkshopMongoApplication.class, args);
Rodar a classe e abrir localhost:8080 do tomcat.
Dar start no cmd no Mongodb
Criar uma base de dados e uma coleção

Iniciar criação de pacotes e classes

Checklist para criar entidades:
 Atributos básicos
 Associações (inicie as coleções)
 Construtores (não inclua coleções no construtor com parâmetros)
 Getters e setters
 hashCode e equals (implementação padrão: somente id)
 Serializable (padrão: 1L)

Criar Entidade Resource, classe responsável pelas requisições HTTP dessa entidade

Conectar com banco-> dependências
Pois ao invés de instanciar objetos você pega eles do banco.

Criar pacotes de services e repository e file application.properties para conectar com a host do Mongodb
Em repository interface irá acessar banco de dados
Em service injeção de dependência da camada de acesso ao banco
Entidade declarar @Document(collection = "user") E @Id
Resource injeção de dependência da camada serviço e refatorar método para acessar por essa dependência o retorno de todos objetos do banco

 config com classe Instantiation para instanciar objetos e salvar no banco

DTO (Data Transfer Object): é um objeto que tem o papel de carregar dados das entidades de forma simples,
podendo inclusive "projetar" apenas alguns dados da entidade original.

Insere,apaga e atualiza com métodos HTTP ; User e UserDTO

Cria a entidade Post com mesma lógica
Faz referência para AuthorDTO
Referenciando os posts do usuário
Acrescentando comentários aos posts

Consulta simples com query methods
escrever findbyAtributo... e a consulta no banco é feito automático

